% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/objects.R
\name{create_anglemania_object}
\alias{create_anglemania_object}
\alias{.core_create_anglemania_object}
\alias{create_anglemania_object,Seurat-method}
\alias{create_anglemania_object,SingleCellExperiment-method}
\alias{create_anglemania_object,list-method}
\title{Create an anglemania_object from a Seurat or SingleCellExperiment Object}
\usage{
create_anglemania_object(object, ...)

.core_create_anglemania_object(
  meta,
  matrix_list,
  batch_key,
  dataset_key = NA_character_,
  min_cells_per_gene = 1,
  seurat_assay = "RNA",
  allow_missing_features = FALSE,
  min_samples_per_gene = 2
)

\S4method{create_anglemania_object}{Seurat}(
  object,
  batch_key,
  dataset_key = NA_character_,
  min_cells_per_gene = 1,
  allow_missing_features = FALSE,
  min_samples_per_gene = 2,
  seurat_assay = "RNA",
  ...
)

\S4method{create_anglemania_object}{SingleCellExperiment}(
  object,
  batch_key,
  dataset_key = NA_character_,
  min_cells_per_gene = 1,
  allow_missing_features = FALSE,
  min_samples_per_gene = 2,
  ...
)

\S4method{create_anglemania_object}{list}(
  object,
  min_cells_per_gene = 1,
  allow_missing_features = FALSE,
  min_samples_per_gene = 2,
  seurat_assay = "RNA",
  ...
)
}
\arguments{
\item{object}{A list of Seurat or SingleCellExperiment objects}

\item{...}{Additional arguments passed to .core_create_anglemania_object}

\item{meta}{A data frame containing metadata for the dataset. Will be extracted from
the Seurat or SingleCellExperiment object or constructed from a list of objects.}

\item{matrix_list}{A list of count matrices for each batch.}

\item{batch_key}{A character string that names the column in the metadata
that contains the batch information}

\item{dataset_key}{Column name for dataset information (optional)}

\item{min_cells_per_gene}{Minimum cells expressing a gene}

\item{seurat_assay}{Assay of the Seurat object to extract counts from}

\item{allow_missing_features}{Logical; allow genes missing in some batches}

\item{min_samples_per_gene}{Minimum samples required if
allow_missing_features is TRUE}
}
\value{
An \code{\link{anglemania_object-class}} containing:
\describe{
\item{\code{matrix_list}}{A list of filtered count matrices for each unique
batch.}
\item{\code{dataset_key}}{The dataset key used for splitting the
object.}
\item{\code{batch_key}}{The batch key used for splitting the
object.}
\item{\code{data_info}}{A data frame summarizing the number of samples per
dataset and their weights.}
\item{\code{weights}}{A numeric vector of weights for each dataset or batch
based on the number of samples.}
\item{\code{intersect_genes}}{A character vector of genes expressed in at
least the specified number of cells across all batches.}
\item{\code{min_cells_per_gene}}{The minimum number of cells per gene
threshold used for filtering.}
}

anglemania_object
}
\description{
Constructs an \code{\link{anglemania_object-class}} from a given
\code{\link[Seurat]{Seurat}} or
\code{\link[SingleCellExperiment]{SingleCellExperiment}} object.
This includes extracting and processing count matrices, filtering genes
based on expression in a minimum number of cells, and storing results
along with dataset and batch information. It also calculates weights for
each dataset or batch based on the number of samples.
}
\details{
The function performs the following steps:
\enumerate{
\item Adds a unique batch key to the metadata using
\code{\link{add_unique_batch_key}}.
\item Extracts count matrices for each batch.
\item Filters genes based on the \code{min_cells_per_gene} threshold.
\item Identifies intersected genes present across all batches.
\item Converts count matrices to \code{\link[bigstatsr]{FBM}} objects.
\item Computes weights for each batch or dataset.
}
}
\examples{
sce <- sce_example()
angl <- create_anglemania_object(sce, batch_key = "batch")
angl
sce <- sce_example()
batch_key <- "batch"
meta <- SingleCellExperiment::colData(sce) \%>\% 
  as.data.frame() \%>\% 
  add_unique_batch_key(batch_key=batch_key)

matrix_list <- lapply(unique(meta[[batch_key]]), function(batch) {
  batch_cells <- rownames(meta[meta[[batch_key]] == batch, ])
  batch_mat <- SingleCellExperiment::counts(sce[, batch_cells])
  return(batch_mat)
})

angl <- .core_create_anglemania_object(
  meta = meta,
  matrix_list = matrix_list,
  batch_key = batch_key
)

angl
sce <- sce_example()
se <- Seurat::as.Seurat(sce, data = "counts")
se <- SeuratObject::RenameAssays(se, "originalexp", "RNA")
angl <- create_anglemania_object(se, batch_key = "batch")
angl
sce <- sce_example()
angl <- create_anglemania_object(sce, batch_key = "batch")
angl
sce <- sce_example()
sce_list <- list(sce1 = sce, sce2 = sce)
angl <- create_anglemania_object(sce_list)
angl
se <- Seurat::as.Seurat(sce, data = "counts")
se <- SeuratObject::RenameAssays(se, "originalexp", "RNA")
se_list <- list(se1 = se, se2 = se)
angl <- create_anglemania_object(se_list)
angl
}
\seealso{
\code{\link{anglemania_object-class}},
\code{\link{add_unique_batch_key}},
\code{\link{anglemania}},
\code{\link[bigstatsr]{FBM}}
}
